{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5f5bff5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>created_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>647746</td>\n",
       "      <td>2011564</td>\n",
       "      <td>2019-02-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>906136</td>\n",
       "      <td>4105782</td>\n",
       "      <td>2019-11-23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12862997</td>\n",
       "      <td>2144063</td>\n",
       "      <td>2019-07-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12097079</td>\n",
       "      <td>1207738</td>\n",
       "      <td>2019-04-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3184486</td>\n",
       "      <td>4278839</td>\n",
       "      <td>2019-03-08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    user_id  product_id  created_at\n",
       "0    647746     2011564  2019-02-09\n",
       "1    906136     4105782  2019-11-23\n",
       "2  12862997     2144063  2019-07-16\n",
       "3  12097079     1207738  2019-04-05\n",
       "4   3184486     4278839  2019-03-08"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df = pd.read_csv(\"purchase_history.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "26fc8d6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2174447"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1f528112",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>created_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12862997</td>\n",
       "      <td>2144063</td>\n",
       "      <td>2019-07-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969122</th>\n",
       "      <td>12862997</td>\n",
       "      <td>2144063</td>\n",
       "      <td>2019-11-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1631287</th>\n",
       "      <td>12862997</td>\n",
       "      <td>2144063</td>\n",
       "      <td>2019-05-21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890577</th>\n",
       "      <td>12862997</td>\n",
       "      <td>2144063</td>\n",
       "      <td>2019-11-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978805</th>\n",
       "      <td>12862997</td>\n",
       "      <td>2144063</td>\n",
       "      <td>2019-09-07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          user_id  product_id  created_at\n",
       "2        12862997     2144063  2019-07-16\n",
       "969122   12862997     2144063  2019-11-02\n",
       "1631287  12862997     2144063  2019-05-21\n",
       "1890577  12862997     2144063  2019-11-05\n",
       "1978805  12862997     2144063  2019-09-07"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show example of data with user_id\n",
    "df[df['user_id']==12862997]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "dcb2b344",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: '2019-01-01',\n",
       " 2: '2019-01-02',\n",
       " 3: '2019-01-03',\n",
       " 4: '2019-01-04',\n",
       " 5: '2019-01-05',\n",
       " 6: '2019-01-06',\n",
       " 7: '2019-01-07',\n",
       " 8: '2019-01-08',\n",
       " 9: '2019-01-09',\n",
       " 10: '2019-01-10',\n",
       " 11: '2019-01-11',\n",
       " 12: '2019-01-12',\n",
       " 13: '2019-01-13',\n",
       " 14: '2019-01-14',\n",
       " 15: '2019-01-15',\n",
       " 16: '2019-01-16',\n",
       " 17: '2019-01-17',\n",
       " 18: '2019-01-18',\n",
       " 19: '2019-01-19',\n",
       " 20: '2019-01-20',\n",
       " 21: '2019-01-21',\n",
       " 22: '2019-01-22',\n",
       " 23: '2019-01-23',\n",
       " 24: '2019-01-24',\n",
       " 25: '2019-01-25',\n",
       " 26: '2019-01-26',\n",
       " 27: '2019-01-27',\n",
       " 28: '2019-01-28',\n",
       " 29: '2019-01-29',\n",
       " 30: '2019-01-30',\n",
       " 31: '2019-01-31',\n",
       " 32: '2019-02-01',\n",
       " 33: '2019-02-02',\n",
       " 34: '2019-02-03',\n",
       " 35: '2019-02-04',\n",
       " 36: '2019-02-05',\n",
       " 37: '2019-02-06',\n",
       " 38: '2019-02-07',\n",
       " 39: '2019-02-08',\n",
       " 40: '2019-02-09',\n",
       " 41: '2019-02-10',\n",
       " 42: '2019-02-11',\n",
       " 43: '2019-02-12',\n",
       " 44: '2019-02-13',\n",
       " 45: '2019-02-14',\n",
       " 46: '2019-02-15',\n",
       " 47: '2019-02-16',\n",
       " 48: '2019-02-17',\n",
       " 49: '2019-02-18',\n",
       " 50: '2019-02-19',\n",
       " 51: '2019-02-20',\n",
       " 52: '2019-02-21',\n",
       " 53: '2019-02-22',\n",
       " 54: '2019-02-23',\n",
       " 55: '2019-02-24',\n",
       " 56: '2019-02-25',\n",
       " 57: '2019-02-26',\n",
       " 58: '2019-02-27',\n",
       " 59: '2019-02-28',\n",
       " 60: '2019-02-29',\n",
       " 61: '2019-02-30',\n",
       " 62: '2019-02-31',\n",
       " 63: '2019-03-01',\n",
       " 64: '2019-03-02',\n",
       " 65: '2019-03-03',\n",
       " 66: '2019-03-04',\n",
       " 67: '2019-03-05',\n",
       " 68: '2019-03-06',\n",
       " 69: '2019-03-07',\n",
       " 70: '2019-03-08',\n",
       " 71: '2019-03-09',\n",
       " 72: '2019-03-10',\n",
       " 73: '2019-03-11',\n",
       " 74: '2019-03-12',\n",
       " 75: '2019-03-13',\n",
       " 76: '2019-03-14',\n",
       " 77: '2019-03-15',\n",
       " 78: '2019-03-16',\n",
       " 79: '2019-03-17',\n",
       " 80: '2019-03-18',\n",
       " 81: '2019-03-19',\n",
       " 82: '2019-03-20',\n",
       " 83: '2019-03-21',\n",
       " 84: '2019-03-22',\n",
       " 85: '2019-03-23',\n",
       " 86: '2019-03-24',\n",
       " 87: '2019-03-25',\n",
       " 88: '2019-03-26',\n",
       " 89: '2019-03-27',\n",
       " 90: '2019-03-28',\n",
       " 91: '2019-03-29',\n",
       " 92: '2019-03-30',\n",
       " 93: '2019-03-31',\n",
       " 94: '2019-04-01',\n",
       " 95: '2019-04-02',\n",
       " 96: '2019-04-03',\n",
       " 97: '2019-04-04',\n",
       " 98: '2019-04-05',\n",
       " 99: '2019-04-06',\n",
       " 100: '2019-04-07',\n",
       " 101: '2019-04-08',\n",
       " 102: '2019-04-09',\n",
       " 103: '2019-04-10',\n",
       " 104: '2019-04-11',\n",
       " 105: '2019-04-12',\n",
       " 106: '2019-04-13',\n",
       " 107: '2019-04-14',\n",
       " 108: '2019-04-15',\n",
       " 109: '2019-04-16',\n",
       " 110: '2019-04-17',\n",
       " 111: '2019-04-18',\n",
       " 112: '2019-04-19',\n",
       " 113: '2019-04-20',\n",
       " 114: '2019-04-21',\n",
       " 115: '2019-04-22',\n",
       " 116: '2019-04-23',\n",
       " 117: '2019-04-24',\n",
       " 118: '2019-04-25',\n",
       " 119: '2019-04-26',\n",
       " 120: '2019-04-27',\n",
       " 121: '2019-04-28',\n",
       " 122: '2019-04-29',\n",
       " 123: '2019-04-30',\n",
       " 124: '2019-04-31',\n",
       " 125: '2019-05-01',\n",
       " 126: '2019-05-02',\n",
       " 127: '2019-05-03',\n",
       " 128: '2019-05-04',\n",
       " 129: '2019-05-05',\n",
       " 130: '2019-05-06',\n",
       " 131: '2019-05-07',\n",
       " 132: '2019-05-08',\n",
       " 133: '2019-05-09',\n",
       " 134: '2019-05-10',\n",
       " 135: '2019-05-11',\n",
       " 136: '2019-05-12',\n",
       " 137: '2019-05-13',\n",
       " 138: '2019-05-14',\n",
       " 139: '2019-05-15',\n",
       " 140: '2019-05-16',\n",
       " 141: '2019-05-17',\n",
       " 142: '2019-05-18',\n",
       " 143: '2019-05-19',\n",
       " 144: '2019-05-20',\n",
       " 145: '2019-05-21',\n",
       " 146: '2019-05-22',\n",
       " 147: '2019-05-23',\n",
       " 148: '2019-05-24',\n",
       " 149: '2019-05-25',\n",
       " 150: '2019-05-26',\n",
       " 151: '2019-05-27',\n",
       " 152: '2019-05-28',\n",
       " 153: '2019-05-29',\n",
       " 154: '2019-05-30',\n",
       " 155: '2019-05-31',\n",
       " 156: '2019-06-01',\n",
       " 157: '2019-06-02',\n",
       " 158: '2019-06-03',\n",
       " 159: '2019-06-04',\n",
       " 160: '2019-06-05',\n",
       " 161: '2019-06-06',\n",
       " 162: '2019-06-07',\n",
       " 163: '2019-06-08',\n",
       " 164: '2019-06-09',\n",
       " 165: '2019-06-10',\n",
       " 166: '2019-06-11',\n",
       " 167: '2019-06-12',\n",
       " 168: '2019-06-13',\n",
       " 169: '2019-06-14',\n",
       " 170: '2019-06-15',\n",
       " 171: '2019-06-16',\n",
       " 172: '2019-06-17',\n",
       " 173: '2019-06-18',\n",
       " 174: '2019-06-19',\n",
       " 175: '2019-06-20',\n",
       " 176: '2019-06-21',\n",
       " 177: '2019-06-22',\n",
       " 178: '2019-06-23',\n",
       " 179: '2019-06-24',\n",
       " 180: '2019-06-25',\n",
       " 181: '2019-06-26',\n",
       " 182: '2019-06-27',\n",
       " 183: '2019-06-28',\n",
       " 184: '2019-06-29',\n",
       " 185: '2019-06-30',\n",
       " 186: '2019-06-31',\n",
       " 187: '2019-07-01',\n",
       " 188: '2019-07-02',\n",
       " 189: '2019-07-03',\n",
       " 190: '2019-07-04',\n",
       " 191: '2019-07-05',\n",
       " 192: '2019-07-06',\n",
       " 193: '2019-07-07',\n",
       " 194: '2019-07-08',\n",
       " 195: '2019-07-09',\n",
       " 196: '2019-07-10',\n",
       " 197: '2019-07-11',\n",
       " 198: '2019-07-12',\n",
       " 199: '2019-07-13',\n",
       " 200: '2019-07-14',\n",
       " 201: '2019-07-15',\n",
       " 202: '2019-07-16',\n",
       " 203: '2019-07-17',\n",
       " 204: '2019-07-18',\n",
       " 205: '2019-07-19',\n",
       " 206: '2019-07-20',\n",
       " 207: '2019-07-21',\n",
       " 208: '2019-07-22',\n",
       " 209: '2019-07-23',\n",
       " 210: '2019-07-24',\n",
       " 211: '2019-07-25',\n",
       " 212: '2019-07-26',\n",
       " 213: '2019-07-27',\n",
       " 214: '2019-07-28',\n",
       " 215: '2019-07-29',\n",
       " 216: '2019-07-30',\n",
       " 217: '2019-07-31',\n",
       " 218: '2019-08-01',\n",
       " 219: '2019-08-02',\n",
       " 220: '2019-08-03',\n",
       " 221: '2019-08-04',\n",
       " 222: '2019-08-05',\n",
       " 223: '2019-08-06',\n",
       " 224: '2019-08-07',\n",
       " 225: '2019-08-08',\n",
       " 226: '2019-08-09',\n",
       " 227: '2019-08-10',\n",
       " 228: '2019-08-11',\n",
       " 229: '2019-08-12',\n",
       " 230: '2019-08-13',\n",
       " 231: '2019-08-14',\n",
       " 232: '2019-08-15',\n",
       " 233: '2019-08-16',\n",
       " 234: '2019-08-17',\n",
       " 235: '2019-08-18',\n",
       " 236: '2019-08-19',\n",
       " 237: '2019-08-20',\n",
       " 238: '2019-08-21',\n",
       " 239: '2019-08-22',\n",
       " 240: '2019-08-23',\n",
       " 241: '2019-08-24',\n",
       " 242: '2019-08-25',\n",
       " 243: '2019-08-26',\n",
       " 244: '2019-08-27',\n",
       " 245: '2019-08-28',\n",
       " 246: '2019-08-29',\n",
       " 247: '2019-08-30',\n",
       " 248: '2019-08-31',\n",
       " 249: '2019-09-01',\n",
       " 250: '2019-09-02',\n",
       " 251: '2019-09-03',\n",
       " 252: '2019-09-04',\n",
       " 253: '2019-09-05',\n",
       " 254: '2019-09-06',\n",
       " 255: '2019-09-07',\n",
       " 256: '2019-09-08',\n",
       " 257: '2019-09-09',\n",
       " 258: '2019-09-10',\n",
       " 259: '2019-09-11',\n",
       " 260: '2019-09-12',\n",
       " 261: '2019-09-13',\n",
       " 262: '2019-09-14',\n",
       " 263: '2019-09-15',\n",
       " 264: '2019-09-16',\n",
       " 265: '2019-09-17',\n",
       " 266: '2019-09-18',\n",
       " 267: '2019-09-19',\n",
       " 268: '2019-09-20',\n",
       " 269: '2019-09-21',\n",
       " 270: '2019-09-22',\n",
       " 271: '2019-09-23',\n",
       " 272: '2019-09-24',\n",
       " 273: '2019-09-25',\n",
       " 274: '2019-09-26',\n",
       " 275: '2019-09-27',\n",
       " 276: '2019-09-28',\n",
       " 277: '2019-09-29',\n",
       " 278: '2019-09-30',\n",
       " 279: '2019-09-31',\n",
       " 280: '2019-10-01',\n",
       " 281: '2019-10-02',\n",
       " 282: '2019-10-03',\n",
       " 283: '2019-10-04',\n",
       " 284: '2019-10-05',\n",
       " 285: '2019-10-06',\n",
       " 286: '2019-10-07',\n",
       " 287: '2019-10-08',\n",
       " 288: '2019-10-09',\n",
       " 289: '2019-10-10',\n",
       " 290: '2019-10-11',\n",
       " 291: '2019-10-12',\n",
       " 292: '2019-10-13',\n",
       " 293: '2019-10-14',\n",
       " 294: '2019-10-15',\n",
       " 295: '2019-10-16',\n",
       " 296: '2019-10-17',\n",
       " 297: '2019-10-18',\n",
       " 298: '2019-10-19',\n",
       " 299: '2019-10-20',\n",
       " 300: '2019-10-21',\n",
       " 301: '2019-10-22',\n",
       " 302: '2019-10-23',\n",
       " 303: '2019-10-24',\n",
       " 304: '2019-10-25',\n",
       " 305: '2019-10-26',\n",
       " 306: '2019-10-27',\n",
       " 307: '2019-10-28',\n",
       " 308: '2019-10-29',\n",
       " 309: '2019-10-30',\n",
       " 310: '2019-10-31',\n",
       " 311: '2019-11-01',\n",
       " 312: '2019-11-02',\n",
       " 313: '2019-11-03',\n",
       " 314: '2019-11-04',\n",
       " 315: '2019-11-05',\n",
       " 316: '2019-11-06',\n",
       " 317: '2019-11-07',\n",
       " 318: '2019-11-08',\n",
       " 319: '2019-11-09',\n",
       " 320: '2019-11-10',\n",
       " 321: '2019-11-11',\n",
       " 322: '2019-11-12',\n",
       " 323: '2019-11-13',\n",
       " 324: '2019-11-14',\n",
       " 325: '2019-11-15',\n",
       " 326: '2019-11-16',\n",
       " 327: '2019-11-17',\n",
       " 328: '2019-11-18',\n",
       " 329: '2019-11-19',\n",
       " 330: '2019-11-20',\n",
       " 331: '2019-11-21',\n",
       " 332: '2019-11-22',\n",
       " 333: '2019-11-23',\n",
       " 334: '2019-11-24',\n",
       " 335: '2019-11-25',\n",
       " 336: '2019-11-26',\n",
       " 337: '2019-11-27',\n",
       " 338: '2019-11-28',\n",
       " 339: '2019-11-29',\n",
       " 340: '2019-11-30',\n",
       " 341: '2019-11-31',\n",
       " 342: '2019-12-01',\n",
       " 343: '2019-12-02',\n",
       " 344: '2019-12-03',\n",
       " 345: '2019-12-04',\n",
       " 346: '2019-12-05',\n",
       " 347: '2019-12-06',\n",
       " 348: '2019-12-07',\n",
       " 349: '2019-12-08',\n",
       " 350: '2019-12-09',\n",
       " 351: '2019-12-10',\n",
       " 352: '2019-12-11',\n",
       " 353: '2019-12-12',\n",
       " 354: '2019-12-13',\n",
       " 355: '2019-12-14',\n",
       " 356: '2019-12-15',\n",
       " 357: '2019-12-16',\n",
       " 358: '2019-12-17',\n",
       " 359: '2019-12-18',\n",
       " 360: '2019-12-19',\n",
       " 361: '2019-12-20',\n",
       " 362: '2019-12-21',\n",
       " 363: '2019-12-22',\n",
       " 364: '2019-12-23',\n",
       " 365: '2019-12-24',\n",
       " 366: '2019-12-25',\n",
       " 367: '2019-12-26',\n",
       " 368: '2019-12-27',\n",
       " 369: '2019-12-28',\n",
       " 370: '2019-12-29',\n",
       " 371: '2019-12-30',\n",
       " 372: '2019-12-31',\n",
       " 373: '2020-01-01',\n",
       " 374: '2020-01-02',\n",
       " 375: '2020-01-03',\n",
       " 376: '2020-01-04',\n",
       " 377: '2020-01-05',\n",
       " 378: '2020-01-06',\n",
       " 379: '2020-01-07',\n",
       " 380: '2020-01-08',\n",
       " 381: '2020-01-09',\n",
       " 382: '2020-01-10',\n",
       " 383: '2020-01-11',\n",
       " 384: '2020-01-12',\n",
       " 385: '2020-01-13',\n",
       " 386: '2020-01-14',\n",
       " 387: '2020-01-15',\n",
       " 388: '2020-01-16',\n",
       " 389: '2020-01-17',\n",
       " 390: '2020-01-18',\n",
       " 391: '2020-01-19',\n",
       " 392: '2020-01-20',\n",
       " 393: '2020-01-21',\n",
       " 394: '2020-01-22',\n",
       " 395: '2020-01-23',\n",
       " 396: '2020-01-24',\n",
       " 397: '2020-01-25',\n",
       " 398: '2020-01-26',\n",
       " 399: '2020-01-27',\n",
       " 400: '2020-01-28',\n",
       " 401: '2020-01-29',\n",
       " 402: '2020-01-30',\n",
       " 403: '2020-01-31',\n",
       " 404: '2020-02-01',\n",
       " 405: '2020-02-02',\n",
       " 406: '2020-02-03',\n",
       " 407: '2020-02-04',\n",
       " 408: '2020-02-05',\n",
       " 409: '2020-02-06',\n",
       " 410: '2020-02-07',\n",
       " 411: '2020-02-08',\n",
       " 412: '2020-02-09',\n",
       " 413: '2020-02-10',\n",
       " 414: '2020-02-11',\n",
       " 415: '2020-02-12',\n",
       " 416: '2020-02-13',\n",
       " 417: '2020-02-14',\n",
       " 418: '2020-02-15',\n",
       " 419: '2020-02-16',\n",
       " 420: '2020-02-17',\n",
       " 421: '2020-02-18',\n",
       " 422: '2020-02-19',\n",
       " 423: '2020-02-20',\n",
       " 424: '2020-02-21',\n",
       " 425: '2020-02-22',\n",
       " 426: '2020-02-23',\n",
       " 427: '2020-02-24',\n",
       " 428: '2020-02-25',\n",
       " 429: '2020-02-26',\n",
       " 430: '2020-02-27',\n",
       " 431: '2020-02-28',\n",
       " 432: '2020-02-29',\n",
       " 433: '2020-02-30',\n",
       " 434: '2020-02-31',\n",
       " 435: '2020-03-01',\n",
       " 436: '2020-03-02',\n",
       " 437: '2020-03-03',\n",
       " 438: '2020-03-04',\n",
       " 439: '2020-03-05',\n",
       " 440: '2020-03-06',\n",
       " 441: '2020-03-07',\n",
       " 442: '2020-03-08',\n",
       " 443: '2020-03-09',\n",
       " 444: '2020-03-10',\n",
       " 445: '2020-03-11',\n",
       " 446: '2020-03-12',\n",
       " 447: '2020-03-13',\n",
       " 448: '2020-03-14',\n",
       " 449: '2020-03-15',\n",
       " 450: '2020-03-16',\n",
       " 451: '2020-03-17',\n",
       " 452: '2020-03-18',\n",
       " 453: '2020-03-19',\n",
       " 454: '2020-03-20',\n",
       " 455: '2020-03-21',\n",
       " 456: '2020-03-22',\n",
       " 457: '2020-03-23',\n",
       " 458: '2020-03-24',\n",
       " 459: '2020-03-25',\n",
       " 460: '2020-03-26',\n",
       " 461: '2020-03-27',\n",
       " 462: '2020-03-28',\n",
       " 463: '2020-03-29',\n",
       " 464: '2020-03-30',\n",
       " 465: '2020-03-31',\n",
       " 466: '2020-04-01',\n",
       " 467: '2020-04-02',\n",
       " 468: '2020-04-03',\n",
       " 469: '2020-04-04',\n",
       " 470: '2020-04-05',\n",
       " 471: '2020-04-06',\n",
       " 472: '2020-04-07',\n",
       " 473: '2020-04-08',\n",
       " 474: '2020-04-09',\n",
       " 475: '2020-04-10',\n",
       " 476: '2020-04-11',\n",
       " 477: '2020-04-12',\n",
       " 478: '2020-04-13',\n",
       " 479: '2020-04-14',\n",
       " 480: '2020-04-15',\n",
       " 481: '2020-04-16',\n",
       " 482: '2020-04-17',\n",
       " 483: '2020-04-18',\n",
       " 484: '2020-04-19',\n",
       " 485: '2020-04-20',\n",
       " 486: '2020-04-21',\n",
       " 487: '2020-04-22',\n",
       " 488: '2020-04-23',\n",
       " 489: '2020-04-24',\n",
       " 490: '2020-04-25',\n",
       " 491: '2020-04-26',\n",
       " 492: '2020-04-27',\n",
       " 493: '2020-04-28',\n",
       " 494: '2020-04-29',\n",
       " 495: '2020-04-30',\n",
       " 496: '2020-04-31',\n",
       " 497: '2020-05-01',\n",
       " 498: '2020-05-02',\n",
       " 499: '2020-05-03',\n",
       " 500: '2020-05-04',\n",
       " 501: '2020-05-05',\n",
       " 502: '2020-05-06',\n",
       " 503: '2020-05-07',\n",
       " 504: '2020-05-08',\n",
       " 505: '2020-05-09',\n",
       " 506: '2020-05-10',\n",
       " 507: '2020-05-11',\n",
       " 508: '2020-05-12',\n",
       " 509: '2020-05-13',\n",
       " 510: '2020-05-14',\n",
       " 511: '2020-05-15',\n",
       " 512: '2020-05-16',\n",
       " 513: '2020-05-17',\n",
       " 514: '2020-05-18',\n",
       " 515: '2020-05-19',\n",
       " 516: '2020-05-20',\n",
       " 517: '2020-05-21',\n",
       " 518: '2020-05-22',\n",
       " 519: '2020-05-23',\n",
       " 520: '2020-05-24',\n",
       " 521: '2020-05-25',\n",
       " 522: '2020-05-26',\n",
       " 523: '2020-05-27',\n",
       " 524: '2020-05-28',\n",
       " 525: '2020-05-29',\n",
       " 526: '2020-05-30',\n",
       " 527: '2020-05-31',\n",
       " 528: '2020-06-01',\n",
       " 529: '2020-06-02',\n",
       " 530: '2020-06-03',\n",
       " 531: '2020-06-04',\n",
       " 532: '2020-06-05',\n",
       " 533: '2020-06-06',\n",
       " 534: '2020-06-07',\n",
       " 535: '2020-06-08',\n",
       " 536: '2020-06-09',\n",
       " 537: '2020-06-10',\n",
       " 538: '2020-06-11',\n",
       " 539: '2020-06-12',\n",
       " 540: '2020-06-13',\n",
       " 541: '2020-06-14',\n",
       " 542: '2020-06-15',\n",
       " 543: '2020-06-16',\n",
       " 544: '2020-06-17',\n",
       " 545: '2020-06-18',\n",
       " 546: '2020-06-19',\n",
       " 547: '2020-06-20',\n",
       " 548: '2020-06-21',\n",
       " 549: '2020-06-22',\n",
       " 550: '2020-06-23',\n",
       " 551: '2020-06-24',\n",
       " 552: '2020-06-25',\n",
       " 553: '2020-06-26',\n",
       " 554: '2020-06-27',\n",
       " 555: '2020-06-28',\n",
       " 556: '2020-06-29',\n",
       " 557: '2020-06-30',\n",
       " 558: '2020-06-31',\n",
       " 559: '2020-07-01',\n",
       " 560: '2020-07-02',\n",
       " 561: '2020-07-03',\n",
       " 562: '2020-07-04',\n",
       " 563: '2020-07-05',\n",
       " 564: '2020-07-06',\n",
       " 565: '2020-07-07',\n",
       " 566: '2020-07-08',\n",
       " 567: '2020-07-09',\n",
       " 568: '2020-07-10',\n",
       " 569: '2020-07-11',\n",
       " 570: '2020-07-12',\n",
       " 571: '2020-07-13',\n",
       " 572: '2020-07-14',\n",
       " 573: '2020-07-15',\n",
       " 574: '2020-07-16',\n",
       " 575: '2020-07-17',\n",
       " 576: '2020-07-18',\n",
       " 577: '2020-07-19',\n",
       " 578: '2020-07-20',\n",
       " 579: '2020-07-21',\n",
       " 580: '2020-07-22',\n",
       " 581: '2020-07-23',\n",
       " 582: '2020-07-24',\n",
       " 583: '2020-07-25',\n",
       " 584: '2020-07-26',\n",
       " 585: '2020-07-27',\n",
       " 586: '2020-07-28',\n",
       " 587: '2020-07-29',\n",
       " 588: '2020-07-30',\n",
       " 589: '2020-07-31',\n",
       " 590: '2020-08-01',\n",
       " 591: '2020-08-02',\n",
       " 592: '2020-08-03',\n",
       " 593: '2020-08-04',\n",
       " 594: '2020-08-05',\n",
       " 595: '2020-08-06',\n",
       " 596: '2020-08-07',\n",
       " 597: '2020-08-08',\n",
       " 598: '2020-08-09',\n",
       " 599: '2020-08-10',\n",
       " 600: '2020-08-11',\n",
       " 601: '2020-08-12',\n",
       " 602: '2020-08-13',\n",
       " 603: '2020-08-14',\n",
       " 604: '2020-08-15',\n",
       " 605: '2020-08-16',\n",
       " 606: '2020-08-17',\n",
       " 607: '2020-08-18',\n",
       " 608: '2020-08-19',\n",
       " 609: '2020-08-20',\n",
       " 610: '2020-08-21',\n",
       " 611: '2020-08-22',\n",
       " 612: '2020-08-23',\n",
       " 613: '2020-08-24',\n",
       " 614: '2020-08-25',\n",
       " 615: '2020-08-26',\n",
       " 616: '2020-08-27',\n",
       " 617: '2020-08-28',\n",
       " 618: '2020-08-29',\n",
       " 619: '2020-08-30',\n",
       " 620: '2020-08-31',\n",
       " 621: '2020-09-01',\n",
       " 622: '2020-09-02',\n",
       " 623: '2020-09-03',\n",
       " 624: '2020-09-04',\n",
       " 625: '2020-09-05',\n",
       " 626: '2020-09-06',\n",
       " 627: '2020-09-07',\n",
       " 628: '2020-09-08',\n",
       " 629: '2020-09-09',\n",
       " 630: '2020-09-10',\n",
       " 631: '2020-09-11',\n",
       " 632: '2020-09-12',\n",
       " 633: '2020-09-13',\n",
       " 634: '2020-09-14',\n",
       " 635: '2020-09-15',\n",
       " 636: '2020-09-16',\n",
       " 637: '2020-09-17',\n",
       " 638: '2020-09-18',\n",
       " 639: '2020-09-19',\n",
       " 640: '2020-09-20',\n",
       " 641: '2020-09-21',\n",
       " 642: '2020-09-22',\n",
       " 643: '2020-09-23',\n",
       " 644: '2020-09-24',\n",
       " 645: '2020-09-25',\n",
       " 646: '2020-09-26',\n",
       " 647: '2020-09-27',\n",
       " 648: '2020-09-28',\n",
       " 649: '2020-09-29',\n",
       " 650: '2020-09-30',\n",
       " 651: '2020-09-31',\n",
       " 652: '2020-10-01',\n",
       " 653: '2020-10-02',\n",
       " 654: '2020-10-03',\n",
       " 655: '2020-10-04',\n",
       " 656: '2020-10-05',\n",
       " 657: '2020-10-06',\n",
       " 658: '2020-10-07',\n",
       " 659: '2020-10-08',\n",
       " 660: '2020-10-09',\n",
       " 661: '2020-10-10',\n",
       " 662: '2020-10-11',\n",
       " 663: '2020-10-12',\n",
       " 664: '2020-10-13',\n",
       " 665: '2020-10-14',\n",
       " 666: '2020-10-15',\n",
       " 667: '2020-10-16',\n",
       " 668: '2020-10-17',\n",
       " 669: '2020-10-18',\n",
       " 670: '2020-10-19',\n",
       " 671: '2020-10-20',\n",
       " 672: '2020-10-21',\n",
       " 673: '2020-10-22',\n",
       " 674: '2020-10-23',\n",
       " 675: '2020-10-24',\n",
       " 676: '2020-10-25',\n",
       " 677: '2020-10-26',\n",
       " 678: '2020-10-27',\n",
       " 679: '2020-10-28',\n",
       " 680: '2020-10-29',\n",
       " 681: '2020-10-30',\n",
       " 682: '2020-10-31',\n",
       " 683: '2020-11-01',\n",
       " 684: '2020-11-02',\n",
       " 685: '2020-11-03',\n",
       " 686: '2020-11-04',\n",
       " 687: '2020-11-05',\n",
       " 688: '2020-11-06',\n",
       " 689: '2020-11-07',\n",
       " 690: '2020-11-08',\n",
       " 691: '2020-11-09',\n",
       " 692: '2020-11-10',\n",
       " 693: '2020-11-11',\n",
       " 694: '2020-11-12',\n",
       " 695: '2020-11-13',\n",
       " 696: '2020-11-14',\n",
       " 697: '2020-11-15',\n",
       " 698: '2020-11-16',\n",
       " 699: '2020-11-17',\n",
       " 700: '2020-11-18',\n",
       " 701: '2020-11-19',\n",
       " 702: '2020-11-20',\n",
       " 703: '2020-11-21',\n",
       " 704: '2020-11-22',\n",
       " 705: '2020-11-23',\n",
       " 706: '2020-11-24',\n",
       " 707: '2020-11-25',\n",
       " 708: '2020-11-26',\n",
       " 709: '2020-11-27',\n",
       " 710: '2020-11-28',\n",
       " 711: '2020-11-29',\n",
       " 712: '2020-11-30',\n",
       " 713: '2020-11-31',\n",
       " 714: '2020-12-01',\n",
       " 715: '2020-12-02',\n",
       " 716: '2020-12-03',\n",
       " 717: '2020-12-04',\n",
       " 718: '2020-12-05',\n",
       " 719: '2020-12-06',\n",
       " 720: '2020-12-07',\n",
       " 721: '2020-12-08',\n",
       " 722: '2020-12-09',\n",
       " 723: '2020-12-10',\n",
       " 724: '2020-12-11',\n",
       " 725: '2020-12-12',\n",
       " 726: '2020-12-13',\n",
       " 727: '2020-12-14',\n",
       " 728: '2020-12-15',\n",
       " 729: '2020-12-16',\n",
       " 730: '2020-12-17',\n",
       " 731: '2020-12-18',\n",
       " 732: '2020-12-19',\n",
       " 733: '2020-12-20',\n",
       " 734: '2020-12-21',\n",
       " 735: '2020-12-22',\n",
       " 736: '2020-12-23',\n",
       " 737: '2020-12-24',\n",
       " 738: '2020-12-25',\n",
       " 739: '2020-12-26',\n",
       " 740: '2020-12-27',\n",
       " 741: '2020-12-28',\n",
       " 742: '2020-12-29',\n",
       " 743: '2020-12-30',\n",
       " 744: '2020-12-31'}"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def TokenizingDateTimes():\n",
    "    date_to_token = {}\n",
    "    token_to_date = {}\n",
    "    tknz = 1\n",
    "    for year in range(2019, 2021): # years create\n",
    "        for month in range(1, 13): # month create\n",
    "            for day in range(1, 32): # days create\n",
    "                if day<10 and month<10:\n",
    "                    date_to_token[f\"{year}-0{month}-0{day}\"] = tknz\n",
    "                    token_to_date[tknz] = f\"{year}-0{month}-0{day}\"\n",
    "                    tknz += 1\n",
    "                elif day<10 and month>=10:\n",
    "                    date_to_token[f\"{year}-{month}-0{day}\"] = tknz\n",
    "                    token_to_date[tknz] = f\"{year}-{month}-0{day}\"\n",
    "                    tknz += 1\n",
    "                elif day>=10 and month<10:\n",
    "                    date_to_token[f\"{year}-0{month}-{day}\"] = tknz\n",
    "                    token_to_date[tknz] = f\"{year}-0{month}-{day}\"\n",
    "                    tknz += 1\n",
    "                else:\n",
    "                    date_to_token[f\"{year}-{month}-{day}\"] = tknz\n",
    "                    token_to_date[tknz] = f\"{year}-{month}-{day}\"\n",
    "                    tknz += 1\n",
    "                    \n",
    "    return date_to_token, token_to_date        \n",
    "            \n",
    "        \n",
    "tokens_value, tokens_key = TokenizingDateTimes()   \n",
    "tokens_key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a4d5a792",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, '2019-01-20')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#show example\n",
    "tokens_value['2019-01-20'], tokens_key[20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "08d42934",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>created_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>860746</th>\n",
       "      <td>8672008</td>\n",
       "      <td>3890806</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1516796</th>\n",
       "      <td>750857</td>\n",
       "      <td>2198311</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782386</th>\n",
       "      <td>6601315</td>\n",
       "      <td>987662</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018022</th>\n",
       "      <td>1060650</td>\n",
       "      <td>3356497</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318411</th>\n",
       "      <td>1220553</td>\n",
       "      <td>898824</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         user_id  product_id  created_at\n",
       "860746   8672008     3890806           2\n",
       "1516796   750857     2198311           2\n",
       "782386   6601315      987662           2\n",
       "2018022  1060650     3356497           2\n",
       "318411   1220553      898824           2"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['created_at'] = df['created_at'].map(tokens_value)\n",
    "df.sort_values(by='created_at', inplace=True) # sort values to visulization better\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "23f385ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# show example of data with user_id and product_id\n",
    "example = df[df['user_id']==3184486]\n",
    "example = example[example['product_id']==4278839]['created_at']\n",
    "indexes = [i for i in range(len(example))]\n",
    "plt.plot(indexes, example)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5488e6d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# we must split any user_id and product_id\n",
    "data_dict = {}\n",
    "for name, value in df.groupby(by=['user_id', 'product_id']):\n",
    "    data_dict[name] = sorted(list(set(value['created_at'].values)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4fb02f54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([26, 31, 33, 41, 283, 289, 296, 308], [3, 26, 136, 148])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show examples\n",
    "data_dict[(577243, 968036)], data_dict[(577243, 968153)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ab75a86e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# values must be the same length\n",
    "def MinimomLength(ln):\n",
    "    return min([len(i) for i in ln])\n",
    "\n",
    "chunke = MinimomLength(data_dict.values())\n",
    "chunke"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e22c2e7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((318050, 3), (318050,))"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train = []\n",
    "y_train = []\n",
    "for val in data_dict.values():\n",
    "    x_train.append(val[-chunke:-1])\n",
    "    y_train.append(val[-1])\n",
    "    \n",
    "x_train, y_train = np.array(x_train), np.array(y_train)\n",
    "x_train.shape, y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d3aacf2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8018710245072824"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "# for Linear Regression\n",
    "model = LinearRegression(n_jobs=10)\n",
    "model.fit(x_train, y_train)\n",
    "model.score(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "8b82fa31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9501507033210249"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for Random Forest Regressor\n",
    "model = RandomForestRegressor(n_jobs=10, n_estimators=100,)\n",
    "model.fit(x_train, y_train)\n",
    "model.score(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bea6a4ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9737711299520847"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for Decision Tree Regressor\n",
    "model = DecisionTreeRegressor()\n",
    "model.fit(x_train, y_train)\n",
    "model.score(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "70b738a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.859380845219555"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for K Neighbors Regressor\n",
    "model = KNeighborsRegressor(n_jobs=10, n_neighbors=4)\n",
    "model.fit(x_train, y_train)\n",
    "model.score(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "67d1d364",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[19, 44, 106, 171]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dict[(577243, 875550)] # target is 171"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7db00cd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([171.])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# example predictions\n",
    "x_test = np.array([19, 44, 106]) \n",
    "pred = model.predict(x_test.reshape(1, -1))\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8bbff0f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2019-06-16'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokens_key[int(pred)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fee850cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([229.])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict future\n",
    "x_future = np.array([44, 106, 171]) \n",
    "forcast = model.predict(x_future.reshape(1, -1))\n",
    "forcast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b0583e6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2019-08-12'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokens_key[int(forcast)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d909831",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
